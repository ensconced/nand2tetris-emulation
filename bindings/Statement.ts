// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ASTNode } from "./ASTNode";
import type { Expression } from "./Expression";
import type { SubroutineCall } from "./SubroutineCall";

export type Statement = { Let: { var_name: string, array_index: ASTNode<Expression> | null, value: ASTNode<Expression>, } } | { If: { condition: ASTNode<Expression>, if_statements: Array<ASTNode<Statement>>, else_statements: Array<ASTNode<Statement>> | null, } } | { While: { condition: ASTNode<Expression>, statements: Array<ASTNode<Statement>>, } } | { Do: ASTNode<SubroutineCall> } | { Return: ASTNode<Expression> | null };