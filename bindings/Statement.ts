// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { Expression } from "./Expression";
import type { IndexedJackNode } from "./IndexedJackNode";
import type { SubroutineCall } from "./SubroutineCall";

export type Statement = { Let: { var_name: string, array_index: IndexedJackNode<Expression> | null, value: IndexedJackNode<Expression>, } } | { If: { condition: IndexedJackNode<Expression>, if_statements: Array<IndexedJackNode<Statement>>, else_statements: Array<IndexedJackNode<Statement>> | null, } } | { While: { condition: IndexedJackNode<Expression>, statements: Array<IndexedJackNode<Statement>>, } } | { Do: [SubroutineCall, number] } | { Return: IndexedJackNode<Expression> | null };