class Main {
    static int current_frame_buffer, next_frame_buffer;

    function void main () {
      var int i;

      do Neighbours.init();

      let current_frame_buffer = Memory.calloc(32);
      let next_frame_buffer = Memory.calloc(32);

      // initialise glider:
      // 00000000000000100000000000000000
      // 00000000000000010000000000000000
      // 00000000000001110000000000000000
      let current_frame_buffer[0] = 2;
      let current_frame_buffer[2] = 1;
      let current_frame_buffer[4] = 7;

      do Drawing.draw_from_compact_representation(current_frame_buffer);

      while (true) {
        do handle_frame();
      }
    }

    function void copy_next_buffer() {
      var int i;

      let i = 0;
      while (i < 32) {
        let current_frame_buffer[i] = next_frame_buffer[i];
        let i = i + 1;
      }
    }

    function void handle_frame() {
      var int word_idx, bit_idx, word, mask;

      let word_idx = 0;
      while (word_idx < 32) {
        let bit_idx = 0;
        let word = 0;
        let mask = 1;

        while (bit_idx < 16) {
          let word = word | (get_next_state(word_idx, bit_idx) & mask);
          let mask = mask + mask;
          let bit_idx = bit_idx + 1;
        }

        let next_frame_buffer[word_idx] = word;
        let word_idx = word_idx + 1;
      }

      do copy_next_buffer();
      do Drawing.draw_from_compact_representation(current_frame_buffer);
    }

    function bool read_value(int word_idx, int bit_idx) {
      return Number.bit_is_set(current_frame_buffer[word_idx], bit_idx);
    }

    function bool get_next_state(int word_idx, int bit_idx) {
      // Any live cell with two or three live neighbours survives.
      // Any dead cell with three live neighbours becomes a live cell.
      // All other live cells die in the next generation. Similarly, all other dead cells stay dead.
      var int live_neighbours;

      let live_neighbours = Neighbours.live_neighbour_count(word_idx, bit_idx);

      if (Number.bit_is_set(current_frame_buffer[word_idx], bit_idx)) {
        return (live_neighbours = 2) | (live_neighbours = 3);
      } else {
        return live_neighbours = 3;
      }
    }
}