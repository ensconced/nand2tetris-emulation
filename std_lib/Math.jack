class Math {
  // For internal use only.
  function void init() {}

  function int abs(int x) {
    if (x < 0) {
      return -x;
    } else {
      return x;
    }
  }

  function int multiply(int x, int y) {
    var int shifted_x, i, result, mask;

    let shifted_x = x;
    let i = 0;
    let result = 0;
    let mask = 1;

    while (i < 16) {
      if ((y & mask) = mask) {
        let result = result + shifted_x;
      }
      let shifted_x = shifted_x + shifted_x;
      let mask = mask + mask;
      let i = i + 1;
    }

    return result;
  }

  // Returns the integer part of x/y.
  function int divide(int x, int y) {
    var int absx, absy;

    let absx = abs(x);
    let absy = abs(y);

    if (x < 0 = y < 0) {
      return divide_non_negatives(absx, absy);
    }
    return -divide_non_negatives(absx, absy);
  }

  function int divide_non_negatives(int x, int y) {
    var int quotient_for_double_divisor, double_divisor, remainder;
    if (y > x) {
      return 0;
    }
    let double_divisor = 2 * y;
    let quotient_for_double_divisor = divide(x, double_divisor);
    let remainder = x - quotient_for_double_divisor * double_divisor;
    if (remainder < y) {
      return 2 * quotient_for_double_divisor;
    } else {
      return 2 * quotient_for_double_divisor + 1;
    }
  }

  function int min(int x, int y) {
    if (x < y) {
      return x;
    } else {
      return y;
    }
  }

  function int max(int x, int y) {
    if (x > y) {
      return x;
    } else {
      return y;
    }
  }

  // Integer part of the square root
  function int sqrt(int x) {
    // use binary search
    var int y, offset, with_offset;
    let y = 0;
    let offset = 127;

    while (offset >= 1) {
      let with_offset = y + offset;
       if (with_offset * with_offset <= x) {
         let y = with_offset;
       }
      let offset = offset / 2;
    }

    return y;
  }

  function int pow2(int exp) {
    var int result, i;

    let result = 1;
    let i = 0;
    while (i < exp) {
      let result = result + result;
      let i = i + 1;
    }
    return result;
  }
}