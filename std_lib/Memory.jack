/*
  Heap allocator using the "Buddy memory algorithm".
  See https://en.wikipedia.org/wiki/Buddy_memory_allocation
  There is also a good desciption of the algorithm in Knuth's The Art of Computer Programming Vol 1.

  The algorithm involves maintaining a number of lists of free blocks. Each list contains
  blocks of a different size. The lists are doubly linked to make it easy to remove a block from any
  position within a list, provided a pointer to the base of the block. Another important aspect
  of the algorithm is that each block (excepting the original single block which covers the entire heap)
  has a "buddy" block. It's easy to find the buddy of any given block, provided a pointer to its base,
  without needing to iterate through any lists at all, just by doing some pointer arithmetic.

  Free blocks have a 4-word header consisting of:
   - a boolean field set to true, indicating that the block is free
   - a field indicating the order of the block
   - the forward pointer to the next block
   - the backward pointer to the previous block

  Allocated blocks have a 2-work header consisting of:
   - a boolean field set to false, indicating that the block is not free
   - a field indicating the order of the block

  The buddy algorithm works very nicely when your heap begins at memory address 0. Knuth's description
  assumes this is the case. Ours however begins at address 2048, which makes it all slightly more awkward,
  but it still works if we take account of this offset.

  The algorithm has some overheads in terms of memory usage. Specifically, it requires
  13 words of memory, to hold the heads for each of the 13 avail lists. We could
  just use 13 static variables but this would make a significant impact on the space remaining
  in the static segment for usage in user programs. It would also make the code here annoying
  verbose. Another alternative would be to have a dedicated section of system memory for these
  overheads, but it would feel wrong to modify the architecure just to accomodate this algorithm.
  So here I have taken another approach. To start with, I use the screen memory for the overheads.
  Then I initialize the allocator. Then I use the initialized allocator to allocate a block of
  memory to use for its own overheads, and copy the overheads over from screen memory
  into this block. Hence I kind of bootstrap the allocator then use it to allocate some memory
  for itself which is kind of cool. Then I zero out the screen memory again.
  I guess this the the screen might briefly flicker on startup but I don't really care about that.
*/


class Memory {
  static int avail, min_block_order;

  function void init() {
    var int block_order, heap_base, screen, i, new_avail;

    // Free blocks have 4-word header. So the smallest blocks
    // will be 4 words long, which is an order of 2.
    let min_block_order = 2;

    // Initially, use the screen memory.
    let screen = 18432;
    let avail = screen;

    let heap_base = 2048;

    // Init avail list. All lists for order < 14 are empty i.e. just a null pointer.
    let block_order = min_block_order;
    while (block_order < 14) {
      let avail[block_order - min_block_order] = 0;
      let block_order = block_order + 1;
    }

    // To begin with, there is a single block of order 14,
    // with its base at address 2048.
    let avail[block_order - min_block_order] = heap_base;

    // Set block header
    let heap_base[0] = true;
    let heap_base[1] = 14;
    let heap_base[2] = 0;
    let heap_base[3] = 0;

    // We're all initialized, so now we can use alloc to get some heap memory
    // to use for the overheads required by the allocation algorithm itself.
    let new_avail = alloc(13);
    do copy(new_avail, screen, 13);
    let avail = new_avail;

    // Don't leave a mess on the screen!
    let i = 0;
    while (i < 13) {
      let screen[i] = 0;
      let i = i + 1;
    }
  }

  function void copy(int dest, int src, int count) {
    var int i;

    let i = 0;
    while (i < count) {
      let dest[i] = src[i];
      let i = i + 1;
    }
  }

  function void pushFreeBlock(int block) {
    var int head_location, head;

    let head_location = avail + block[1] - min_block_order;
    let head = head_location[0];
    if (head) {
      let head[3] = block;
    }
    let block[2] = head;
    let block[3] = 0;
    let head_location[0] = block;
  }

  function int popFreeBlock(int order) {
    var int head_location, head, new_head;

    let head_location = avail + order - min_block_order;
    let head = head_location[0];
    if (head) {
      let new_head = head[2];
      if (new_head) {
        let new_head[3] = 0;
      }
      let head_location[0] = new_head;
    }
    return head;
  }

  function int split_block(int block) {
    var int half_size, new_block, block_order, new_block_order;

    let block_order = block[1];
    let new_block_order = block_order - 1;
    let half_size = Math.pow2(new_block_order);
    let new_block = block + half_size;

    let block[1] = new_block_order;
    let new_block[1] = new_block_order;
    let new_block[0] = true;

    do pushFreeBlock(new_block);
    return block;
  }

  function int get_block(int required_order) {
    var int block, bigger_block;

    let block = popFreeBlock(required_order);
    if (block) {
      return block;
    }

    if (required_order = 14) {
      return 0;
    }

    let bigger_block = get_block(required_order + 1);
    if (bigger_block) {
      return split_block(bigger_block);
    }
    return 0;
  }

  function int get_order(int size) {
    var int order, order_size;

    let order = 2;
    let order_size = 4;
    while (order_size < size) {
      let order = order + 1;
      let order_size = order_size + order_size;
    }
    return order;
  }

  function int alloc(int requested_size) {
    var int free_block, block_order;

    let block_order = get_order(requested_size + 2);
    let free_block = get_block(block_order);
    if (free_block) {
      let free_block[0] = false;
      let free_block[2] = block_order;
      return free_block + 2;
    }
    return 0;
  }

  function int findFreeBuddy(int block) {
    var int offset_block, block_size, offset_buddy, buddy, block_order;

    let block_order = block[1];

    if (block_order > 13) {
      return 0;
    }

    let offset_block = block - 2048;
    let block_size = Math.pow2(block_order);
    // This operation would be much easier and more performant
    // if we had bitwise XOR in hardware.
    if (offset_block & block_size) {
      let offset_buddy = offset_block - block_size;
    } else {
      let offset_buddy = offset_block + block_size;
    }
    let buddy = offset_buddy + 2048;
    if (buddy[0] & buddy[1] = block_order) {
      return buddy;
    }
    return 0;
  }

  function void removeFreeBlock(int block) {
    var int head_location, prev_location, next_location;

    let head_location = avail + block[1] - min_block_order;

    let prev_location = block[3];
    if (prev_location) {
      let prev_location[2] = block[2];
    } else {
      let head_location[0] = block[2];
    }

    let next_location = block[2];
    if (next_location) {
      let next_location[3] = block[3];
    }
  }

  function int mergeBuddies(int freed_block, int buddy_block) {
    var int merged_block, new_block_order;

    do removeFreeBlock(buddy_block);
    let merged_block = Math.min(freed_block, buddy_block);
    let merged_block[1] = freed_block[1] + 1;
    return merged_block;
  }

  function void deAlloc(int ptr) {
    var int block, free_buddy;

    let block = ptr - 2;
    while (true) {
        let free_buddy = findFreeBuddy(block);
        if (free_buddy) {
          let block = mergeBuddies(block, free_buddy, block[1]);
        } else {
          let block[0] = true;
          do pushFreeBlock(block);
          return;
        }
    }
  }
}