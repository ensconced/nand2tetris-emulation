/*
  Maintains a "free list" - i.e. a list of free blocks of memory.
  Each block has a 2-word header.
  The first word of the header is the number of words of memory contained by the block.
  The second word of the header is a pointer to the next free block, or zero if it's the last block in the list.
*/

class Memory {
  static int head;

  // For internal use only.
  function void init() {
    var int total_available_memory;

    // To start with,Â the free list has a single entry consisting of the entire heap.
    let head = 2048;
    let total_available_memory = 16384 - 2048 - 2;
    let head[0] = total_available_memory;
    let head[1] = 0;
  }

  // Finds and allocates from the heap a memory block of the specified size and
  // returns a reference to its base address. Returns zero if failed to allocate.
  function int alloc(int size) {
    var int result, current, next, block_size, remaining_words_in_block, prev;
    let current = head;

    // Iterate through the free list until we find a big enough block.
    while (current[0] < size) {
      let next = current[1];
      if (next = 0) {
        // TODO - attempt to defrag, then try again
        return 0;
      }
      let prev = current;
      let current = next;
    }

    // We managed to find a suitable block.
    let block_size = current[0];
    let remaining_words_in_block = block_size - size;
    if (remaining_words_in_block = 0) {
      // We need to remove the block from the free list completely.
      if (prev) {
        let prev[1] = current[1];
      } else {
        // We are removing the first block in the list.
        let head = current[1];
      }
      return current + 2;
    } else {
      // We only need to adjust the size of the block.
      let current[0] = remaining_words_in_block;
      return current + 2 + remaining_words_in_block;
    }
  }

  // De-allocates the given object and frees its memory space.
  // The argument is a pointer to an array or any class instance.
  function void deAlloc(int object) {
    // not yet implemented!
  }
}