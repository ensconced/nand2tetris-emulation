class Output {
  static int cursor_x, cursor_y;

  // for internal use only
  function void init() {
    let cursor_x = 0;
    let cursor_y = 0;
  }

  // moves the cursor to the j-th column of the i-th row,
  // and erases the character displayed there.
  function void moveCursor(int i, int j) {
    let cursor_x = i;
    let cursor_y = j;
  }

  function void advanceCursor() {
    let cursor_x = (cursor_x + 1) & 63;
    if (cursor_x = 0) {
      let cursor_y = (cursor_y + 1) & 31;
    }
  }

  function int getMsb(int word) {
    var int result, mask, i, bit;

    let mask = 256;
    let bit = 1;
    let i = 0;
    while (i < 8) {
      if (word & mask) {
        let result = result + bit;
      }
      let bit = bit * 2;
      let mask = mask * 2;
      let i = i + 1;
    }

    return result;
  }

  function int getLsb(int word) {
    return word & 255;
  }


  function int getGlyph(char c) {
    var int result, i, glyph_base, line_pair, msb, lsb;

    let glyph_base = 26625 + (c - 32) * 4;

    let result = Memory.alloc(8);
    let i = 0;
    while (i < 4) {
      let line_pair = glyph_base[i];
      let msb = getMsb(line_pair);
      let lsb = getLsb(line_pair);
      let result[2 * i] = msb;
      let result[2 * i + 1] = lsb;
      let i = i + 1;
    }
    return result;
  }

  // prints string starting at the cursor location and
  // advances the cursor appropriately
  function void printString(String str) {
    var int i;

    let i = 0;
    while (i < str.length()) {
      do printChar(str.charAt(i));
      let i = i + 1;
    }
  }

  // prints c at the cursor location and advances
  // the cursor one column forward
  function void printChar(char c) {
    var int glyph, screen, screen_offset, use_cursor_lsb, i, line;

    let screen = 18432;
    let screen_offset = cursor_y * 256 + (cursor_x / 2);
    let use_cursor_lsb = cursor_x & 1;

    let glyph = Output.getGlyph(c);
    let i = 0;
    while (i < 8) {
      let line = glyph[i];

      if (use_cursor_lsb) {
        let screen[screen_offset] = (screen[screen_offset] & -256) | line;
      } else {
        let screen[screen_offset] = (screen[screen_offset] & 255) | (line * 256);
      }

      let i = i + 1;
      let screen_offset = screen_offset + 32;
    }

    do Memory.deAlloc(glyph);
    do advanceCursor();
  }

  // prints i starting at the cursor location and advances
  // the cursor appropriately
  function void printInt(int i) {
    var String str;

    let str = "";
    do str.setInt(i);
    do printString(str);
  }

  // advances the cursor to the beginning of the next line
  function void println() {}

  // moves the cursor one column back
  function void backSpace() {}
}