class Screen {
  static int color, screen;

  function void init() {
    let screen = 18432;
  }

  // sets a color to be used for all further drawXXX commands
  function void setColor(boolean b) {
    let color = b;
  }

  function void drawPixel(int x1, int y1) {
    var int word_idx, bit_distance_from_lsb, mask, i;

    let word_idx = (y1 * 32) + (x1 / 16);
    let bit_distance_from_lsb = 15 - (x1 & 15);

    let mask = 1;
    let i = 0;
    while (i < bit_distance_from_lsb) {
      let mask = mask + mask;
      let i = i + 1;
    }

    if (color) {
      let screen[word_idx] = screen[word_idx] | mask;
    } else {
      let screen[word_idx] = screen[word_idx] & ~mask;
    }
  }

  function void drawRectangle(int x1, int y1, int x2, int y2) {
    var int start_col, end_col, current_col, mask, i, word_idx;

    let start_col = x1 / 16;
    let end_col =  x2 / 16;
    let current_col = start_col;

    while (current_col <= end_col) {
      let mask = -1;
      if (current_col = start_col) {
        let mask = mask & (Math.pow2(16 - (x1 - start_col * 16)) - 1);
      }
      if (current_col = end_col) {
        let mask = mask & ~(Math.pow2(16 - (x2 - end_col * 16)) - 1);
      }

      let word_idx = current_col + y1 * 32;

      let i = y1;
      while (i < y2) {
        if (color) {
          let screen[word_idx] = screen[word_idx] | mask;
        } else {
          let screen[word_idx] = screen[word_idx] & ~mask;
        }
        let i = i + 1;
        let word_idx = word_idx + 32;
      }
      let current_col = current_col + 1;
    }
  }

  function void drawCircle(int x, int y, int r) {}

  function void clearScreen() {
    var int i;
    while (i < 8192) {
      let screen[i] = 0;
      let i = i + 1;
    }
  }
}