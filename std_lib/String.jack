class String {
  field int buffer, buffer_length, length;

  constructor String new(int max_length) {
    let buffer_length = max_length;
    let buffer = Memory.alloc(buffer_length);
    let length = 0;
    return this;
  }

  method void dispose() {
    do Memory.deAlloc(buffer);
    do Memory.deAlloc(this);
  }

  method char charAt(int j) {
    return buffer[j];
  }

  method int length() {
    return length;
  }

  method void setCharAt(int j, char c) {
    let buffer[j] = c;
  }

  method void appendChar(char c) {
    var int new_buffer, new_buffer_length, i;

    if (length = buffer_length) {
      if (length = 0) {
        let new_buffer_length = 1;
      } else {
        let new_buffer_length = buffer_length * 2;
      }

      let new_buffer = Memory.alloc(new_buffer_length);

      let i = 0;
      while (i < length) {
        let new_buffer[i] = buffer[i];
        let i = i + 1;
      }

      do Memory.deAlloc(buffer);
      let buffer = new_buffer;
      let buffer_length = new_buffer_length;
    }

    let buffer[length] = c;
    let length = length + 1;
  }

  method void eraseLastChar() {
    let length = length - 1;
  }

  method int intValue() {
    var int i, result, multiplier, digit;

    let result = 0;
    let i = length - 1;
    let multiplier = 1;

    while (i >= 0) {
      let digit = buffer[i];
      if (digit >= 48 & digit <= 57) {
        // it's in the ascii digit range
        let result = result + multiplier * (digit - 48);
      } else {
        return result;
      }
      let i = i - 1;
      let multiplier = multiplier * 10;
    }
    return result;
  }

  method void reverse() {
    var int i, swp;

    let i = 0;

    while (i < length / 2)  {
      let swp = buffer[i];
      let buffer[i] = buffer[length - 1 - i];
      let buffer[length - 1 - i] = swp;
      let i = i + 1;
    }
  }

  method void setInt(int j) {
    var int remainder, divided;
    var String foo;

    // TODO - this is pretty awkward, but the current syntactical
    // rules don't allow calling a method on this directly.
    let foo = this;

    let length = 0;
    while (j > 0) {
      let divided = j / 10;
      let remainder = j - divided * 10;
      let j = divided;
      do foo.appendChar(remainder + 48);
    }
    do foo.reverse();
  }

  function char backSpace() {
    return 8;
  }

  function char doubleQuote() {
    return 34;
  }

  function char newLine() {
    return 10;
  }
}